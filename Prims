#include <iostream>
#include <climits>
using namespace std;
#define V 6
#define INF INT_MAX

void findMinEdge(int graph[V][V], int n, int &x, int &y, int &minEdge)
{
    minEdge=INF;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(graph[i][j]<minEdge && graph[i][j]!=INF)
            {
                minEdge=graph[i][j];
                x=i;
                y=j;
            }
        }
    }
}

void prims(int graph[V][V], int n)
{
    int minCost=0;
    int nearest[V];
    int tree[V-1][2];
    int x=-1, y=-1, minEdge;
    findMinEdge(graph,n,x,y,minEdge);
    minCost=minEdge;
    tree[0][0]=x;
    tree[0][1]=y;
    
    for(int i=0;i<n;i++)
    {
        if(graph[i][y]<graph[i][x])
        nearest[i]=y;
        else nearest[i]=x;
    }
    nearest[x]=nearest[y]=-1;
    
    for(int i=1;i<n-1;i++)
    {
        int minIndex=-1;
        int minValue=INF;
        for(int j=0;j<n;j++)
        {
            if (nearest[j]!=-1 && graph[j][nearest[j]]<minValue)
            {
                minValue=graph[j][nearest[j]];
                minIndex=j;
            }
        }
    
        tree[i][0]=minIndex;
        tree[i][1]=nearest[minIndex];
        minCost+=graph[minIndex][nearest[minIndex]];
        nearest[minIndex]=-1;
    
        for(int j=0;j<n;j++)
        {
            if(nearest[j]!=-1 && graph[j][nearest[j]]>graph[j][minIndex])
            nearest[j]=minIndex;
        }
    }
    
    cout<<"MST EDGES: "<<endl;
    for(int i=0;i<n-1;i++)
    {
        cout<<tree[i][0]<<" "<<tree[i][1]<<endl;
    }
    cout<<"Total minCost: "<<minCost;
}

int main()
{
    int graph[V][V] = {
        {INF, 4, INF, INF, 6, INF},
        {4, INF, 2, 5, INF, INF},
        {INF, 2, INF, 7, 3, INF},
        {INF, 5, 7, INF, INF, 9},
        {6, INF, 3, INF, INF, 8},
        {INF, INF, INF, 9, 8, INF}
    };
    prims(graph,V);
    return 0;
}
